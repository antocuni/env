(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ange-ftp-ftp-program-name "pftp")
 '(ansi-color-names-vector
   ["black" "red" "green" "yellow" "#4646FF" "magenta" "cyan" "white"])
 '(auto-revert-interval 1)
 '(auto-revert-remote-files nil)
 '(blink-cursor-mode nil)
 '(c-basic-offset 4)
 '(c-offsets-alist (quote ((brace-list-intro . +))))
 '(dabbrev-case-distinction t)
 '(dabbrev-case-fold-search nil)
 '(dired-dwim-target t)
 '(fill-column 78)
 '(find-file-hook
   (quote
    (auto-revert-find-file-function global-auto-complete-mode-check-buffers recentf-track-opened-file generic-mode-find-file-hook url-handlers-set-buffer-mode global-eldoc-mode-check-buffers global-font-lock-mode-check-buffers epa-file-find-file-hook vc-refresh-state)))
 '(flyspell-issue-message-flag nil)
 '(git-link-use-commit t)
 '(grep-save-buffers nil)
 '(ibuffer-default-directory "~")
 '(ibuffer-default-sorting-mode (quote filename/process))
 '(ibuffer-display-summary t)
 '(ibuffer-expert t)
 '(ido-default-buffer-method (quote selected-window))
 '(ido-enable-flex-matching t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(ispell-check-comments nil)
 '(jka-compr-compression-info-list
   (quote
    (["\\.Z\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" "compress"
      ("-c")
      "uncompressing" "gzip"
      ("-c" "-q" "-d")
      nil t "\235"]
     ["\\.bz2\\(~\\|\\.~[0-9]+~\\)?\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2"
      ("-d")
      nil t "BZh"]
     ["\\.tbz2?\\'" "bzip2ing" "bzip2" nil "bunzip2ing" "bzip2"
      ("-d")
      nil nil "BZh"]
     ["\\.\\(?:tgz\\|svgz\\|sifz\\)\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" "gzip"
      ("-c" "-q")
      "uncompressing" "gzip"
      ("-c" "-q" "-d")
      t nil "\213"]
     ["\\.\\(g?z\\|gnumeric\\)\\(~\\|\\.~[0-9]+~\\)?\\'" "compressing" "gzip"
      ("-c" "-q")
      "uncompressing" "gzip"
      ("-c" "-q" "-d")
      t t "\213"]
     ["\\.dz\\'" nil nil nil "uncompressing" "gzip"
      ("-c" "-q" "-d")
      nil t "\213"])))
 '(menu-bar-mode window-system)
 '(mode-line-format
   (quote
    ("%e" mode-line-front-space mode-line-mule-info mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
     (vc-mode vc-mode)
     "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)))
 '(package-selected-packages
   (quote
    (unfill thrift git-link poly-markdown polymode scad-mode markdown-preview-eww typescript-mode ibuffer-tramp cuda-mode markdown-preview-mode web-mode php-mode magit yaml-mode vbasense unicode-fonts toml-mode sass-mode racer phi-search-mc multi-web-mode markdown-mode llvm-mode kivy-mode jinja2-mode iy-go-to-char highlight fill-column-indicator dockerfile-mode cython-mode company cargo)))
 '(python-fill-docstring-style (quote django))
 '(reb-re-syntax (quote string))
 '(rst-level-face-base-color "blackn")
 '(safe-local-variable-values
   (quote
    ((encoding . latin-1)
     (encoding . Latin-1)
     (test-case-name . twisted\.test\.test_defer\,twisted\.test\.test_defgen\,twisted\.internet\.test\.test_inlinecb)
     (test-case-name . twisted)
     (test-case-name . twisted\.conch\.test\.test_manhole)
     (sh-indent-comment . t)
     (pymacs-auto-reload . t)
     (test-case-name . test\.test_txpostgres)
     (test-case-name . buildbot\.test\.test_status)
     (test-case-name . buildbot\.test\.test_run)
     (test-case-name . buildbot\.test\.test_runner)
     (test-case-name . buildbot\.test\.test_steps\,buildbot\.test\.test_properties)
     (test-case-name . twisted\.test\.test_internet\,twisted\.internet\.test\.test_posixbase)
     (test-case-name . buildbot\.test\.test_slavecommand)
     (test-case-name . buildbot\.test\.test_steps)
     (test-case-name . buildbot\.test\.test_vc)
     (test-case-name . twisted\.test\.test_log)
     (test-case-name . twisted\.test\.test_application\,twisted\.test\.test_twistd)
     (test-case-name . twisted\.test\.test_twistd)
     (test-case-name . buildbot\.test\.test_twisted)
     (test-case-name . twisted\.web\.test\.test_static)
     (c-tab-always-indent)
     (c-continued-statement-offset . 2)
     (c-brace-offset . -2)
     (c-brace-imaginary-offset . 0)
     (c-argdecl-indent . 0)
     (c-label-offset . -2)
     (auto-revert-interval . 0.5)
     (auto-revert-interval . 0.2)
     (encoding . utf-8))))
 '(scroll-bar-mode (quote right))
 '(scroll-conservatively 100000)
 '(scroll-margin 0)
 '(scroll-preserve-screen-position t)
 '(select-enable-clipboard t)
 '(split-height-threshold 100)
 '(tab-width 4)
 '(tool-bar-mode nil)
 '(tramp-default-method "ssh")
 '(tramp-verbose 6)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(user-mail-address "anto.cuni@gmail.com")
 '(vc-follow-symlinks t)
 '(vc-handled-backends nil)
 '(vc-hg-log-switches nil)
 '(web-mode-markup-indent-offset 2))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 120 :family "Inconsolata"))))
 '(bold ((t (:size "" :bold t))))
 '(bold-italic ((t (:bold t :italic nil))))
 '(diff-added ((t (:inherit diff-changed :foreground "yellow"))))
 '(diff-context ((((class color grayscale) (min-colors 88)) (:inherit shadow :foreground "white"))))
 '(diff-removed ((t (:inherit diff-changed :foreground "grey"))))
 '(dired-flagged ((t (:inherit font-lock-warning-face :background "#F88" :foreground "black"))))
 '(dired-mark ((t (:inherit font-lock-constant-face :foreground "red"))))
 '(dired-marked ((t (:inherit dired-mark))))
 '(font-latex-bold-face ((((class color) (background dark)) (:inherit bold :weight bold))))
 '(font-latex-italic-face ((((class color) (background dark)) (:inherit italic :slant italic :family "Courier New"))))
 '(font-latex-sectioning-5-face ((((class color) (background dark)) (:inherit variable-pitch :weight bold))))
 '(font-latex-sedate-face ((((class color) (background dark)) (:foreground "#FF7777"))))
 '(font-lock-comment-face ((t (:foreground "#99968b" :slant normal))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face))))
 '(font-lock-function-name-face ((((class color) (background light)) (:foreground "blue"))))
 '(font-lock-keyword-face ((t (:foreground "#8ac6f2"))))
 '(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "green4"))))
 '(font-lock-type-face ((((class color) (min-colors 88) (background light)) (:foreground "blue"))))
 '(font-lock-warning-face ((((class color) (background light)) (:foreground "Blue"))))
 '(italic ((t (:size "" :italic t))))
 '(mc/cursor-face ((t (:background "#444"))))
 '(rst-level-1-face ((t (:foreground "red"))) t)
 '(rst-level-2-face ((t (:foreground "#F55"))) t)
 '(term-color-black ((t (:background "dim gray" :foreground "dim gray"))))
 '(term-color-blue ((t (:background "DodgerBlue1" :foreground "DodgerBlue1"))))
 '(term-color-green ((t (:background "lime green" :foreground "lime green"))))
 '(underline ((((supports :underline t)) (:slant italic)))))

(put 'narrow-to-region 'disabled nil)


; XXX: use this to automatically adjust font size based on frame width
; https://blog.patshead.com/2016/04/emacs-automatically-adjust-font-size-when-frame-width-changes.html

(when nil
  ;; for the non-docked mode
  (set-face-attribute 'default (selected-frame) :height 140)
  )

;; use a smaller font on bart
(when (string= system-name "bart")
  (set-face-attribute 'default (selected-frame) :height 118))


; ***********************
; Manually edited section
; ***********************

; Misc options
; =======================

(setq load-path (cons "/home/antocuni/env/elisp" load-path))
(setq load-path (cons "/home/antocuni/pypy/default/rpython/jit/tool/" load-path))
(setq minibuffer-max-depth nil)
(setq font-lock-auto-fontify 1)
;;(setq ansi-term-color-vector [term "dim gray" "red3" "lime green" "yellow3" "DodgerBlue1" "magenta3" "cyan3" "white"]) ; optimized for pdb++

;(set-default-font "-Adobe-Courier-Medium-R-Normal--18-180-75-75-M-110-ISO8859-1")
(savehist-mode t)
(setenv "EMACS" "ON")
(require 'graphviz-dot-mode nil t)
(require 'pypytrace-mode nil t)
(menu-bar-mode -1)

;(load-file "/home/antocuni/src/pytest-emacs/pytest.el")
(require 'capnproto-mode)

(require 'ido)
(ido-mode t)
(setq ido-enable-prefix nil)
(setq ido-enable-flex-matching t) ;; enable fuzzy matching

;; enable wdired, editing filenames in dired renames files
(require 'wdired)
(define-key dired-mode-map (kbd "r") 'wdired-change-to-wdired-mode)

(require 'uniquify)

;; https://emacs.stackexchange.com/questions/20896/change-the-behaviour-of-ret-with-electric-indent-to-only-indent-the-new-line
(add-hook 'kivy-mode-hook
          '(lambda ()
             (setq electric-indent-inhibit t)))


; don't start the server in tty mode
(if window-system
    (progn
      (global-set-key (kbd "C-x C-c") 'server-edit)
      (global-set-key (kbd "C-x C-q") 'save-buffers-kill-emacs)
      (server-start)))

; =============================
; multiple cursors & phi-search
; =============================

(require 'multiple-cursors)
(require 'iy-go-to-char)
(require 'phi-search)
;; (global-set-key (kbd "M-s") 'iy-go-to-char)
;; (global-set-key (kbd "M-r") 'iy-go-to-char-backward)
(add-to-list 'mc/cursor-specific-vars 'iy-go-to-char-start-pos)

(global-set-key (kbd "M-s") 'phi-search)
(global-set-key (kbd "M-r") 'phi-search-backward)

; ========================
; recent file mode for ido
; ========================

(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode t)
; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))



; =================
; auto-complete
; =================

(add-to-list 'load-path "~/env/elisp/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/env/elisp/auto-complete/ac-dict")
(ac-config-default)

; use dabbrev as the main source for auto-complete
(require 'cl)
(require 'dabbrev)
(require 'auto-complete)

(setq ac-auto-start nil)
(setq ac-trigger-key "TAB")

(defun ac-source-dabbrev (abbrev)
  (interactive)
  (dabbrev--reset-global-variables)
  (let ((dabbrev-check-all-buffers t))
    (sort (dabbrev--find-all-expansions abbrev t) #'string<)))

(defvar ac-source-dabbrev-words
  '((candidates
     . (lambda () (all-completions ac-target
                                   (ac-source-dabbrev ac-target)))))
  "Get all the completions using dabbrev")

(setq ac-default-sources '(ac-source-dabbrev-words ac-source-dictionary))

; =====================================
; popup the kill ring when pressing M-y
; =====================================

(require 'popup)
(require 'pos-tip)
(require 'popup-kill-ring)
(global-set-key "\M-y" 'popup-kill-ring)


; auto-mode-alist
; =======================

(setq auto-mode-alist
      (append '(("\\.latex$" . latex-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("web\\.config$" . xml-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("\\.aspx$" . xml-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("[:/]emacs\\'" . emacs-lisp-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("\\.cs$" . java-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("\\.capnp$" . capnproto-mode)) auto-mode-alist))

; Custom keybindings
; =======================

(global-set-key [XF86Memo] 'set-mark-command)
(global-set-key [(shift XF86Memo)] 'keyboard-quit)
(global-set-key [mouse-2] 'mouse-yank-primary)

(global-set-key [(control l)] 'font-lock-fontify-buffer)
(global-set-key [(control c) (d)] 'kill-whole-line)
(global-set-key [(control x) (g)] 'rgrep)
(global-set-key [(control c) (r)] 'revert-buffer)
;(global-set-key (kbd "S-SPC") 'fixup-whitespace)

(global-set-key [(meta down)] 'next-error)
(global-set-key [(meta up)] 'previous-error)


(global-set-key [(control z)]
		(function (lambda () (interactive) (set-mark-command 0))))

(global-set-key [(control x) (p)]
		(function (lambda () (interactive)
			    (insert "import pdb;pdb.set_trace()"))))

(global-set-key [(control x) (w)]
		(function (lambda () (interactive)
			    (insert "    dup\n    ldstr \"xxx: \"\n    call void [mscorlib]System.Console::Write(string)\n    call void [mscorlib]System.Console::WriteLine(object)"))))

(global-set-key [(control c) (w)]
		(function (lambda () (interactive)
			    (insert "    ldstr \"xxx\"\n    call void [mscorlib]System.Console::WriteLine(string)\n"))))

(require 'find-file-in-project)
(global-set-key [(control x) (f)] 'find-file-in-project)


; command on regions
; -----------------------

; like python-shift-left but don't deactivate the mark
;; (defun my-shift-left (start end &optional count)
;;   (interactive (if mark-active
;;                    (list (region-beginning) (region-end) current-prefix-arg)
;;                  (list (point) (point) current-prefix-arg)))
;;   (let ((mark (mark)))
;;     (save-excursion
;;       (python-shift-left start end count)
;;       (push-mark mark t t)
;;       ;; Tell the command loop not to deactivate the mark
;;       ;; for transient mark mode
;;       (setq deactivate-mark nil))))

;; ; like python-shift-left but don't deactivate the mark
;; (defun my-shift-right (start end &optional count)
;;   (interactive (if mark-active
;;                    (list (region-beginning) (region-end) current-prefix-arg)
;;                  (list (point) (point) current-prefix-arg)))
;;   (let ((mark (mark)))
;;     (save-excursion
;;       (python-shift-right start end count)
;;       (push-mark mark t t)
;;       ;; Tell the command loop not to deactivate the mark
;;       ;; for transient mark mode
;;       (setq deactivate-mark nil))))

; like replace-string, but don't deactivate the mark
(defun my-replace-string (from-string to-string &optional delimited start end)
  (interactive
   (let ((common
	  (query-replace-read-args
	   (if (and transient-mark-mode mark-active)
	       "Replace string in region"
	     "Replace string")
	   nil)))
     (list (nth 0 common) (nth 1 common) (nth 2 common)
	   (if (and transient-mark-mode mark-active)
	       (region-beginning))
	   (if (and transient-mark-mode mark-active)
	       (region-end)))))
  (let ((mark (mark)))
    (save-excursion
      (perform-replace from-string to-string nil nil delimited nil nil start end)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

;; in emacs 24, python-indent-shift-right (&left) already does the right thing
;; (global-set-key "\C-c>" 'my-shift-right)
;; (global-set-key "\C-c<" 'my-shift-left)
(global-set-key "\C-c>" 'python-indent-shift-right)
(global-set-key "\C-c<" 'python-indent-shift-left)

(global-set-key [(control x) (a)] 'my-replace-string)


(defun count-words (&optional begin end)
  "count words between BEGIN and END (region); if no region defined, count words in buffer"
  (interactive "r")
  (let ((b (if mark-active begin (point-min)))
      (e (if mark-active end (point-max))))
    (message "Word count: %s" (how-many "\\w+" b e))))


; buffers & windows
; -----------------------


(require 'swbuff)
(setq swbuff-exclude-buffer-regexps '("^ .*"
                                      "^\\*Messages\\*$"
                                      "^\\*scratch\\*$"
                                      "^\\*RE-Builder\\*$"
                                      "^\\*Buffer List\\*$"
                                      "^\\*Completions\\*$"))

;(global-set-key [(control x) (x)] 'electric-buffer-list)
(global-set-key [(control x) (x)] 'ibuffer)

(global-set-key (quote [s-left]) 'swbuff-switch-to-previous-buffer)
(global-set-key (quote [s-right]) 'swbuff-switch-to-next-buffer)

(global-set-key [(control meta l)]
		(function (lambda ()
			    (interactive)
			    (swbuff-switch-to-next-buffer)
			    (ignore))))

(global-set-key [(control tab)] 'other-window)

(global-set-key [(control meta up)] 'enlarge-window)
(global-set-key [(control meta down)] 'shrink-window)
(global-set-key [(control meta right)] 'enlarge-window-horizontally)
(global-set-key [(control meta left)] 'shrink-window-horizontally)

(defun my-scroll-up-one ()
  (interactive)
  (scroll-up 1))

(defun my-scroll-down-one ()
  (interactive)
  (scroll-down 1))

(global-set-key [(shift button5)] 'my-scroll-up-one)
(global-set-key [(shift button4)] 'my-scroll-down-one)
(global-set-key [(control down)] 'my-scroll-up-one)
(global-set-key [(control up)] 'my-scroll-down-one)

; rectangle selection
; -----------------------

(require 'rect-mark)

(define-key ctl-x-map "r\C-SPC" 'rm-set-mark)
(define-key ctl-x-map [?r ?\C-\ ] 'rm-set-mark)
(define-key ctl-x-map "r\C-x" 'rm-exchange-point-and-mark)
(define-key ctl-x-map "r\C-w" 'rm-kill-region)
(define-key ctl-x-map "r\M-w" 'rm-kill-ring-save)
(define-key global-map [S-down-mouse-1] 'rm-mouse-drag-region)
(autoload 'rm-set-mark "rect-mark"
  "Set mark for rectangle." t)
(autoload 'rm-exchange-point-and-mark "rect-mark"
  "Exchange point and mark for rectangle." t)
(autoload 'rm-kill-region "rect-mark"
  "Kill a rectangular region and save it in the kill ring." t)
(autoload 'rm-kill-ring-save "rect-mark"
  "Copy a rectangular region to the kill ring." t)
(autoload 'rm-mouse-drag-region "rect-mark"
  "Drag out a rectangular region with the mouse." t)

; guess tabs for python
;; (autoload 'guess-style-set-variable "guess-style" nil t)
;; (autoload 'guess-style-guess-variable "guess-style")
;; (autoload 'guess-style-guess-all "guess-style" nil t)
(defun my-python-use-tabs ()
  (interactive)
  (setq indent-tabs-mode t)
  (setq tab-width 4)
  (setq python-indent 4))

(defun my-python-dont-use-tabs ()
  (interactive)
  (setq indent-tabs-mode nil)
  (setq tab-width 8)
  (setq python-indent 4))

(add-hook 'python-mode-hook (lambda ()
                              (if (or (search "/gpuppet/" (buffer-file-name))
                                      (search "/repos/" (buffer-file-name))
                                      (string-match "/optfarm-deploy/.*/lib/"  (buffer-file-name)))
                                  (my-python-use-tabs))))


; LRU yank
; -----------------------

(require 'LRU-yank)
(setq LRU-yank-mode t)


; enable save-place
; =======================
(setq save-place-file "~/.emacs.d/saveplace") ;; keep my ~/ clean
(setq-default save-place t)                   ;; activate it for all buffers
(require 'saveplace)                          ;; get the package

; Python mode extensions
; =======================

; stolen from xemacs' python-mode.el
(defun py-newline-and-indent ()
  "Strives to act like the Emacs `newline-and-indent'.
This is just `strives to' because correct indentation can't be computed
from scratch for Python code.  In general, deletes the whitespace before
point, inserts a newline, and takes an educated guess as to how you want
the new line indented."
  (interactive)
  (let ((ci (current-indentation)))
    (if (< ci (current-column))		; if point beyond indentation
        (newline-and-indent)
      ;; else try to act like newline-and-indent "normally" acts
      (beginning-of-line)
      (insert-char ?\n 1)
      (move-to-column ci))))


(defun my-python-ext ()
  (outline-minor-mode)
  (local-set-key [(f1)] 'python-describe-symbol)
  ;; (local-set-key "\C-c>" 'my-shift-right) ;; not necessary in emacs 24
  ;; (local-set-key "\C-c<" 'my-shift-left)  ;; not necessary in emacs 24
  (define-key python-mode-map "\C-m" 'py-newline-and-indent)
  (define-key python-mode-map "\C-c#" 'comment-dwim)
  (setq comment-start "##"))

(add-hook 'python-mode-hook 'my-python-ext)
(add-hook 'inferior-python-mode-hook
          (function (lambda ()
                      (set-process-query-on-exit-flag
                       (get-process "Python") nil))))


; Shell mode extensions
; =======================

;; (setq ansi-color-names-vector ; better contrast colors
;;       ["black" "red4" "green4" "yellow4"
;;        "blue3" "magenta4" "cyan4" "white"])
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq comint-prompt-read-only t)


; Pymacs modules
; =======================

(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'paste-new-from-region "pymacs" nil t)
(eval-after-load "pymacs"
  '(progn
     (add-to-list 'pymacs-load-path "/home/antocuni/env/elisp/pymacs")
     (pymacs-load "pastemacs" "paste-")
     (setq paste-kill-url t)))


; sum a column of numbers
; =======================
(defun sum-column (start end)
  "Adds numbers in a rectangle. Digits must be aligned correctly"
  (interactive "r")
  (copy-rectangle-to-register 9 start end)
  (set-buffer (get-buffer-create "*calc-sum*"))
  (erase-buffer)
  (insert-register 9)
  (let ((sum 0))
    (while (re-search-forward "[0-9]*\\.?[0-9]+" nil t)
      (setq sum (+ sum (string-to-number (match-string 0)))))
    (message "Sum: %f" sum)))


; tramp settings
; ==============

;; WARNING: in case tramp opens your files as read-only, the first thing to
;; check is that it is ssh-ing as the right user. Problems can happen if
;; e.g. ssh antowork is configured to log in as "antocuni" but antowork.gambit
;; is configured to log in as "anto"

(require 'tramp)
(setq debug-on-quit nil
      tramp-verbose 6)

; disable vc on tramp files
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))


; always show the remote host name
;; (defun add-server-postfix ()
;;   "Add the name of the connection type and server to the buffer name"
;;   (if (string-match "^/ssh:.*?:" (buffer-file-name (current-buffer)))
;;       (rename-buffer (concat (buffer-name (current-buffer)) "<" (match-string 0 (buffer-file-name (current-buffer))) ">")) nil))

;; (add-hook 'find-file-hook 'add-server-postfix)


;; Backup (file~) disabled and auto-save (#file#) locally to prevent delays in editing remote files
(add-to-list 'backup-directory-alist
             (cons tramp-file-name-regexp nil))
(setq tramp-auto-save-directory temporary-file-directory)

;; enable tramp debug
;; (setq debug-on-quit t
;;       tramp-verbose 6)


; re-open the current file as root
; =================================

(defun toggle-alternate-file-as-root (&optional filename)
  "Toggle between the current file as the default user and as root."
  (interactive)
  (let* ((filename (or filename (buffer-file-name)))
         (parsed (when (tramp-tramp-file-p filename)
                   (coerce (tramp-dissect-file-name filename)
                           'list))))
    (unless filename
      (error "No file in this buffer."))

    (find-alternate-file
     (if (equal '("sudo" "root") (butlast parsed 2))
         ;; As non-root
         (if (or
              (string= "localhost" (nth 2 parsed))
              (string= (system-name) (nth 2 parsed)))
             (nth -1 parsed)
           (apply 'tramp-make-tramp-file-name
                  (append (list tramp-default-method nil) (cddr parsed))))

       ;; As root
       (if parsed
           (apply 'tramp-make-tramp-file-name
                  (append '("sudo" "root") (cddr parsed)))
         (tramp-make-tramp-file-name "sudo" "root" "localhost" filename))))))


; run pdflatex
; ============


(defun my-tex-compile ()
  (interactive)
  (let ((cmd (concat "pdflatex cv_antocuni.tex"))); (tex-main-file))))
    (if (= 0 (save-window-excursion
               (shell-command cmd "*Tex Command Output*")))
        (message "Ok")
      (switch-to-buffer (get-buffer "*Tex Command Output*")))))

(defun my-tex-ext ()
  (flyspell-mode)
  (auto-fill-mode)
  (local-set-key "\C-c\C-c" 'my-tex-compile))
(add-hook 'TeX-mode-hook 'my-tex-ext)


(defun my-rst2beamer-compile ()
  (interactive)
  (let ((cmd (concat "make"))); (tex-main-file))))
    (if (= 0 (save-window-excursion
               (shell-command cmd "*Tex Command Output*")))
        (message "Ok")
      (switch-to-buffer (get-buffer "*Tex Command Output*")))))

(defun my-rst-ext ()
  (local-set-key "\C-c\C-c" 'my-rst2beamer-compile))
(add-hook 'rst-mode-hook 'my-rst-ext)

(defun restructuredtext-mode ()
  (rst-mode))


(add-hook 'doc-view-mode-hook 'auto-revert-mode)
(global-auto-revert-mode 1)


(add-hook 'before-save-hook 'delete-trailing-whitespace)
;(setq before-save-hook nil)


; =======================================================
; customize vc-hg.el
; =======================================================

(require 'vc-hg)
(require 'vc-annotate)
(require 'ansi-color)

;; change the output of vc-annotate: I don't care for the date, but I want the
;; username

(defun vc-hg-annotate-command (file buffer &optional revision)
  "Execute \"hg annotate\" on FILE, inserting the contents in BUFFER.
Optional arg REVISION is a revision to annotate from."
  (vc-hg-command buffer 0 file "annotate" "-u" "-n"
		 (when revision (concat "-r" revision)))
  (save-window-excursion
    (switch-to-buffer buffer)
    (shell-command-on-region (point-min) (point-max) "blamepipe.py" buffer t)
    (ansi-color-apply-on-region (point-min) (point-max))
    (deactivate-mark)))


(defconst my-vc-hg-annotate-re
  "^[ \t]*\\([A-Za-z]+\\) +\\([0-9]+\\):")

;; disable coloring based on the timestamp
(defun vc-hg-annotate-time () 0)
(defconst vc-annotate-font-lock-keywords ())


(defun vc-hg-annotate-extract-revision-at-line ()
  (save-excursion
    (beginning-of-line)
    (when (looking-at my-vc-hg-annotate-re) (match-string-no-properties 2))))

;; add a new "s" keybiding to annotate and log, which shows both the log
;; message and the diff

(defun my-vc-hg-show-commit (revision)
  (let ((buffer "*vc show*"))
    (vc-setup-buffer buffer)
    (vc-hg-command buffer 0 "" "log" "-vpr" revision)
    (diff-mode)
    (ansi-color-apply-on-region 0 (buffer-size))
    (goto-line 0)
    (setq buffer-read-only t)
    (set-buffer-modified-p nil)
    (switch-to-buffer buffer)
    ))

(defun my-vc-hg-annotate-show-commit-at-line ()
  (interactive)
  (if (not (equal major-mode 'vc-annotate-mode))
      (message "Cannot be invoked outside of a vc annotate buffer")
    (let* ((rev-at-line (vc-annotate-extract-revision-at-line))
           (rev (car rev-at-line)))
      (if (not rev-at-line)
          (message "Cannot extract revision number from the current line")
        (my-vc-hg-show-commit rev)))))


(defun my-vc-hg-log-show-commit-at-line ()
  (interactive)
  (if (not (equal major-mode 'vc-hg-log-view-mode))
      (message "Cannot be invoked outside of a vc log buffer")
    (let* ((rev (log-view-current-tag)))
      (if (not rev)
          (message "Cannot extract revision number from the current line")
        (my-vc-hg-show-commit rev)))))


(define-key vc-annotate-mode-map "s" 'my-vc-hg-annotate-show-commit-at-line)
(define-key vc-hg-log-view-mode-map "s" 'my-vc-hg-log-show-commit-at-line)

; colorize the output of hg log view ansi-color, because my style uses them
(defun my-hg-log-view-mode-hook ()
  (set (make-local-variable 'log-view-message-re)
       "^r\\([0-9]+\\) [a-z0-9]\\{12\\} ")
  (ansi-color-apply-on-region 0 (buffer-size)))

(add-hook 'vc-hg-log-view-mode-hook 'my-hg-log-view-mode-hook)

;; hide untracked files inside vc-dir

(defun vc-hg-dir-status (dir update-function)
  (vc-hg-command (current-buffer) 'async dir "status" "-C" "-q")
  (vc-exec-after
   `(vc-hg-after-dir-status (quote ,update-function))))

(defun vc-hg-dir-status-files (dir files default-state update-function)
  (apply 'vc-hg-command (current-buffer) 'async dir "status" "-C" "-q" files)
  (vc-exec-after
   `(vc-hg-after-dir-status (quote ,update-function))))

(setq vc-log-short-style nil) ;; always show a normal log, never a short one

; ==============================
; my hack to get bitbucket links
; ==============================

(defun bitbucket-link-to-line ()
  (interactive)
  (let*
      ((status nil)
       (out
        (with-output-to-string
          (with-current-buffer
              standard-output
            (setq status
                  (condition-case nil
                      ;; Ignore all errors.
                      (call-process
                       "hg" nil t nil "--cwd" (file-name-directory file)
                       "bblink" (file-name-nondirectory file))
                    ;; Some problem happened.  E.g. We can't find an `hg'
                    ;; executable.
                    (error nil)))))))
    (message status)))

;; =====================
;; toggle window split: switch between horizontal and vertical splitting

(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                       (this-win-edges (window-edges (selected-window)))
                            (next-win-edges (window-edges (next-window)))
                                 (this-win-2nd (not (and (<= (car this-win-edges)
                                                              (car next-win-edges))
                                                              (<= (cadr this-win-edges)
                                                                   (cadr next-win-edges)))))
                                      (splitter
                                             (if (= (car this-win-edges)
                                                         (car (window-edges (next-window))))
                                                   'split-window-horizontally
                                               'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
            (funcall splitter)
              (if this-win-2nd (other-window 1))
                (set-window-buffer (selected-window) this-win-buffer)
                  (set-window-buffer (next-window) next-win-buffer)
                    (select-window first-win)
                      (if this-win-2nd (other-window 1))))))

(define-key ctl-x-4-map "t" 'toggle-window-split)


(require 're-builder)
(defun reb-query-replace-this-regxp (replace)
  "Uses the regexp built with re-builder to query the target buffer.
This function must be run from within the re-builder buffer, not the target
buffer.

Argument REPLACE String used to replace the matched strings in the buffer.
 Subexpression references can be used (\1, \2, etc)."
  (interactive "sReplace with: ")
  (if (eq major-mode 'reb-mode)
      (let ((reg (reb-read-regexp)))
        (select-window reb-target-window)
        (save-excursion
          (beginning-of-buffer)
          (query-replace-regexp reg replace)))
    (message "Not in a re-builder buffer!")))

(define-key reb-mode-map "\C-c\M-%" 'reb-query-replace-this-regxp)


; rust
; =======================

(when (require 'rust-mode nil 'noerror)
  (setq racer-rust-src-path "/usr/local/src/rustc-1.11.0/src/")
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  ; completion
  (add-hook 'racer-mode-hook #'company-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t))


;(add-hook 'find-file-hook 'auto-insert)
(setq auto-insert-alist
      '(("\\.h\\'"
         nil
         '(setq v1 (read-string "Namespace: " "A"))
         '(setq v2 (upcase (concat v1 "_"
                                   (file-name-nondirectory
                                    (file-name-sans-extension buffer-file-name))
                                   "_" (file-name-extension buffer-file-name))))
         "#ifndef " v2 n
         "#define " v2 n n
         "#endif // " v2)))


; Color themes
; ============

(require 'color-theme)
(color-theme-initialize)

(defun wombat-theme()
  (interactive)
  (dolist (frame (frame-list))
    (with-selected-frame frame
      (set-background-color "#202020")
      (set-foreground-color "#f6f3e8")
      (set-cursor-color "#656565")
      (set-face-foreground 'font-lock-comment-face "#99968b")
      (set-face-italic-p 'font-lock-comment-face nil)
      ;(set-face-foreground 'font-lock-doc-face "#99968b")
      ;(set-face-italic-p 'font-lock-doc-face t)
      (set-face-foreground 'font-lock-constant-face "#e5786d")
      (set-face-foreground 'font-lock-string-face "#95e454")
      (set-face-italic-p 'font-lock-string-face nil)
      (set-face-foreground 'font-lock-variable-name-face "#FF8888")
      (set-face-foreground 'font-lock-function-name-face "#FF8888")
      (set-face-foreground 'font-lock-type-face "#FF8888")
      (set-face-foreground 'font-lock-builtin-face "#8ac6f2")
      (set-face-foreground 'font-lock-keyword-face "#8ac6f2")
      (set-face-foreground 'font-lock-preprocessor-face "#e5786d")
      (set-face-foreground 'font-lock-negation-char-face "#e7f6da")
      (set-face-foreground 'link "#8ac6f2")
      (set-face-bold-p 'link t)
      (set-face-underline-p 'link t)
      ;(set-face-foreground 'show-paren-match-face "#f6f3e8")
      ;(set-face-background 'show-paren-match-face "#857b6f")
      ;(set-face-bold-p 'show-paren-match t)
      ;(set-face-foreground 'region "#f6f3e8")
      ;(set-face-background 'region "#444444")
      (set-face-background 'region "LightGoldenrod")
      (set-face-foreground 'region "black")
      (set-face-foreground 'lazy-highlight "black")
      (set-face-background 'lazy-highlight "yellow")
      ;(setq term-default-fg-color (face-foreground term-current-face))
      ;(setq term-default-bg-color (face-background term-current-face))
      )))

(setq my-theme-is-dark t)
(defun my-theme-set ()
  (if my-theme-is-dark
      (wombat-theme)
    (progn
      ;; I don't know why it is necessary to call it twice. If I call it only
      ;; once, I get weird colors
      (color-theme-jsc-light)
      (color-theme-jsc-light)
      (set-face-foreground 'font-lock-negation-char-face "black")
    )))

(defun my-theme-toggle ()
  (interactive)
  (setq my-theme-is-dark (not my-theme-is-dark))
  (my-theme-set))

(my-theme-set)
(global-set-key [f12] 'my-theme-toggle)

(defun my-frame-config (frame)
  "Custom behaviours for new frames."
  (with-selected-frame frame
    (if (display-graphic-p)
        (my-theme-set))))

(my-frame-config (selected-frame))
;; and later
(add-hook 'after-make-frame-functions 'my-frame-config)


(defun top-join-line ()
  "Join the current line with the line beneath it."
  (interactive)
  (delete-indentation 1))
(global-set-key (kbd "C-^") 'top-join-line)

(global-set-key (kbd "C-M-q") 'unfill-paragraph)

; disable C++ namespace indentation
(defconst my-pytorch-cc-style
  '("cc-mode"
    (c-offsets-alist . ((innamespace . [0])))
    (c-basic-offset . 2)
    ))

(c-add-style "my-pytorch-cc-style" my-pytorch-cc-style)

; disable automatic indent of random stuff
; https://emacs.stackexchange.com/questions/20896/change-the-behaviour-of-ret-with-electric-indent-to-only-indent-the-new-line
(setq-default electric-indent-inhibit t)
