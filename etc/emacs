(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(dabbrev-case-distinction t)
 '(dabbrev-case-fold-search nil)
 '(fill-column 78)
 '(flyspell-issue-message-flag nil)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(menu-bar-mode window-system)
 '(scroll-bar-mode (quote right))
 '(tab-width 4)
 '(tool-bar-mode nil)
 '(transient-mark-mode t)
 '(user-mail-address "anto.cuni@gmail.com")
 '(vc-follow-symlinks t)
 '(x-select-enable-clipboard t))

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:size "18pt" :family "Courier"))))
 '(bold ((t (:size "" :bold t))))
 '(bold-italic ((t (:bold t :italic nil))))
 '(dired-flagged ((t (:inherit font-lock-warning-face :background "#F88" :foreground "black"))))
 '(dired-mark ((t (:inherit font-lock-constant-face :foreground "red"))))
 '(dired-marked ((t (:inherit dired-mark))))
 '(font-lock-comment-face ((((class color) (min-colors 88) (background light)) (:foreground "#777"))))
 '(font-lock-function-name-face ((((class color) (background light)) (:foreground "blue"))))
 '(font-lock-keyword-face ((((class color) (background light)) (:foreground "red"))))
 '(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "green4"))))
 '(font-lock-type-face ((((class color) (min-colors 88) (background light)) (:foreground "blue"))))
 '(font-lock-warning-face ((((class color) (background light)) (:foreground "Blue"))))
 '(italic ((t (:size "" :italic t)))))


; ***********************
; Manually edited section
; ***********************

; Misc options
; =======================

(setq load-path (cons "/home/antocuni/pypy/user/antocuni/etc/elisp" load-path))
(setq minibuffer-max-depth nil)
(setq font-lock-auto-fontify 1)
(set-default-font "-Adobe-Courier-Medium-R-Normal--18-180-75-75-M-110-ISO8859-1")
(savehist-mode t)
(setenv "EMACS" "ON")
(require 'graphviz-dot-mode nil t)


; don't start the server in tty mode
(if window-system
    (server-start))


;(require 'auto-complete)
;(global-auto-complete-mode t)
;(setq ac-auto-start nil)
;(global-set-key "\M-/" 'ac-start)


; auto-mode-alist
; =======================

(setq auto-mode-alist
      (append '(("\\.latex$" . latex-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("web\\.config$" . xml-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("\\.aspx$" . xml-mode)) auto-mode-alist))

(setq auto-mode-alist
      (append '(("[:/]emacs\\'" . emacs-lisp-mode)) auto-mode-alist))

; Custom keybindings
; =======================

(global-set-key [XF86Memo] 'set-mark-command)
(global-set-key [(shift XF86Memo)] 'keyboard-quit)

(global-set-key [(control x) (control a)] 'replace-string)
(global-set-key [(control l)] 'font-lock-fontify-buffer)
(global-set-key [(control c) (d)] 'kill-whole-line)

(global-set-key [(control z)]
		(function (lambda () (interactive) (set-mark-command 0))))

(global-set-key [(control x) (p)]
		(function (lambda () (interactive)
			    (insert "import pdb;pdb.set_trace()"))))

(global-set-key [(control x) (w)]
		(function (lambda () (interactive)
			    (insert "    dup\n    ldstr \"xxx: \"\n    call void [mscorlib]System.Console::Write(string)\n    call void [mscorlib]System.Console::WriteLine(object)"))))

(global-set-key [(control c) (w)]
		(function (lambda () (interactive)
			    (insert "    ldstr \"xxx\"\n    call void [mscorlib]System.Console::WriteLine(string)\n"))))



; shift regions
; -----------------------

; like python-shift-left but don't deactivate the mark
(defun my-shift-left (start end &optional count)
  (interactive (if mark-active
                   (list (region-beginning) (region-end) current-prefix-arg)
                 (list (point) (point) current-prefix-arg)))
  (let ((mark (mark)))
    (save-excursion
      (python-shift-left start end count)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

; like python-shift-left but don't deactivate the mark
(defun my-shift-right (start end &optional count)
  (interactive (if mark-active
                   (list (region-beginning) (region-end) current-prefix-arg)
                 (list (point) (point) current-prefix-arg)))
  (let ((mark (mark)))
    (save-excursion
      (python-shift-right start end count)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(global-set-key "\C-c>" 'my-shift-right)
(global-set-key "\C-c<" 'my-shift-left)


; buffers & windows
; -----------------------


(require 'swbuff)
(setq swbuff-exclude-buffer-regexps '("^ .*" "^\\*.*\\*"))

(global-set-key [(control x) (x)] 'electric-buffer-list)

; these are eaten by fluxbox now :-(
(global-set-key (quote [s-left]) 'swbuff-switch-to-previous-buffer)
(global-set-key (quote [s-right]) 'swbuff-switch-to-next-buffer)

; use these as fallback
(global-set-key [(meta left)] 'swbuff-switch-to-previous-buffer)
(global-set-key [(meta right)] 'swbuff-switch-to-next-buffer)

(global-set-key [(control meta l)]
		(function (lambda ()
			    (interactive)
			    (swbuff-switch-to-next-buffer)
			    (ignore))))

(global-set-key [(control tab)] 'other-window)

(global-set-key [(control meta up)] 'enlarge-window)
(global-set-key [(control meta down)] 'shrink-window)
(global-set-key [(control meta right)] 'enlarge-window-horizontally)
(global-set-key [(control meta left)] 'shrink-window-horizontally)

(defun my-scroll-up-one ()
  (interactive)
  (scroll-up 1))

(defun my-scroll-down-one ()
  (interactive)
  (scroll-down 1))

(global-set-key [(shift button5)] 'my-scroll-up-one)
(global-set-key [(shift button4)] 'my-scroll-down-one)
(global-set-key [(control down)] 'my-scroll-up-one)
(global-set-key [(control up)] 'my-scroll-down-one)

; rectangle selection
; -----------------------

(require 'rect-mark)

(define-key ctl-x-map "r\C-SPC" 'rm-set-mark)
(define-key ctl-x-map [?r ?\C-\ ] 'rm-set-mark)
(define-key ctl-x-map "r\C-x" 'rm-exchange-point-and-mark)
(define-key ctl-x-map "r\C-w" 'rm-kill-region)
(define-key ctl-x-map "r\M-w" 'rm-kill-ring-save)
(define-key global-map [S-down-mouse-1] 'rm-mouse-drag-region)
(autoload 'rm-set-mark "rect-mark"
  "Set mark for rectangle." t)
(autoload 'rm-exchange-point-and-mark "rect-mark"
  "Exchange point and mark for rectangle." t)
(autoload 'rm-kill-region "rect-mark"
  "Kill a rectangular region and save it in the kill ring." t)
(autoload 'rm-kill-ring-save "rect-mark"
  "Copy a rectangular region to the kill ring." t)
(autoload 'rm-mouse-drag-region "rect-mark"
  "Drag out a rectangular region with the mouse." t)

; LRU yank
; -----------------------

(require 'LRU-yank)
(setq LRU-yank-mode t)

; Python mode extensions
; =======================

; stolen from xemacs' python-mode.el
(defun py-newline-and-indent ()
  "Strives to act like the Emacs `newline-and-indent'.
This is just `strives to' because correct indentation can't be computed
from scratch for Python code.  In general, deletes the whitespace before
point, inserts a newline, and takes an educated guess as to how you want
the new line indented."
  (interactive)
  (let ((ci (current-indentation)))
    (if (< ci (current-column))		; if point beyond indentation
        (newline-and-indent)
      ;; else try to act like newline-and-indent "normally" acts
      (beginning-of-line)
      (insert-char ?\n 1)
      (move-to-column ci))))

(defun my-python-ext ()
  (outline-minor-mode)
  (local-set-key "\M-s\M-s" 'hide-body)
  (local-set-key "\M-s\M-a" 'show-all)
  (local-set-key "\M-s\M-w" 'show-subtree)
  (local-set-key "\M-s\M-q" 'hide-subtree)
  (local-set-key [(f1)] 'python-describe-symbol)
  (local-set-key "\C-c>" 'my-shift-right)
  (local-set-key "\C-c<" 'my-shift-left)
  (define-key python-mode-map "\C-m" 'py-newline-and-indent)
  (define-key python-mode-map "\C-c#" 'comment-dwim)
  (setq comment-start "##"))

(add-hook 'python-mode-hook 'my-python-ext)
(add-hook 'inferior-python-mode-hook
          (function (lambda ()
                      (set-process-query-on-exit-flag
                       (get-process "Python") nil))))


; Shell mode extensions
; =======================

(setq ansi-color-names-vector ; better contrast colors
      ["black" "red4" "green4" "yellow4"
       "blue3" "magenta4" "cyan4" "white"])
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq comint-prompt-read-only t)


; Pymacs modules
; =======================

(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(eval-after-load "pymacs"
  '(progn
     (add-to-list 'pymacs-load-path "/home/antocuni/pypy/user/antocuni/etc/elisp/pymacs")
     (pymacs-load "paste")
     (setq paste-kill-url t)))


; sum a column of numbers
; =======================
(defun sum-column (start end)
  "Adds numbers in a rectangle. Digits must be aligned correctly"
  (interactive "r")
  (copy-rectangle-to-register 9 start end)
  (set-buffer (get-buffer-create "*calc-sum*"))
  (erase-buffer)
  (insert-register 9)
  (let ((sum 0))
    (while (re-search-forward "[0-9]*\\.?[0-9]+" nil t)
      (setq sum (+ sum (string-to-number (match-string 0)))))
    (message "Sum: %f" sum)))


; Color theme for X window
; =======================

(if window-system
    (set-background-color "gray96"))


; Color theme for tty
; =======================

(eval-when-compile    (require 'color-theme))
(defun tty-dark-color-theme ()
  "Color theme by antocuni, created 2008-07-29."
  (interactive)
  (color-theme-install
   '(tty-dark-color-theme
     ((background-color . "unspecified-bg")
      (background-mode . light)
      (border-color . "blue")
      (cursor-color . "red")
      (foreground-color . "unspecified-fg")
      (mouse-color . "black"))
     ((list-matching-lines-buffer-name-face . underline)
      (list-matching-lines-face . bold)
      (rmail-highlight-face . rmail-highlight)
      (vc-annotate-very-old-color . "#3F3FFF")
      (view-highlight-face . highlight)
      (widget-mouse-face . highlight))
     (default ((t (:stipple nil :background "unspecified-bg" :foreground "unspecified-fg" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1 :width normal :family "default"))))
     (blue ((t (:foreground "blue"))))
     (bold ((t (:bold t :foreground "light gray" :weight bold))))
     (bold-italic ((t (:italic t :bold t :foreground "cyan" :slant italic :weight bold))))
     (border ((t (:background "blue"))))
     (border-glyph ((t (nil))))
     (buffer-menu-buffer ((t (:bold t :weight bold))))
     (buffers-tab ((t (:background "black" :foreground "white"))))
     (button ((t (:underline t))))
     (calendar-today-face ((t (:foreground "white" :underline t))))
     (completions-common-part ((t (:stipple nil :background "unspecified-bg" :foreground "unspecified-fg" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1 :width normal :family "default"))))
     (completions-first-difference ((t (:background "black" :foreground "white" :underline t))))
     (cperl-array-face ((t (:foreground "darkseagreen"))))
     (cperl-hash-face ((t (:foreground "darkseagreen"))))
     (cperl-nonoverridable-face ((t (:foreground "SkyBlue"))))
     (cursor ((t (:background "red"))))
     (custom-button-face ((t (nil))))
     (custom-changed-face ((t (:background "blue" :foreground "white"))))
     (custom-documentation-face ((t (nil))))
     (custom-face-tag-face ((t (:underline t))))
     (custom-group-tag-face ((t (:underline t))))
     (custom-group-tag-face-1 ((t (:underline t))))
     (custom-invalid-face ((t (:background "red" :foreground "white"))))
     (custom-modified-face ((t (:background "blue" :foreground "white"))))
     (custom-rogue-face ((t (:background "black" :foreground "pink"))))
     (custom-saved-face ((t (:underline t))))
     (custom-set-face ((t (:background "white" :foreground "blue"))))
     (custom-state-face ((t (nil))))
     (custom-variable-button-face ((t (:bold t :underline t :weight bold))))
     (custom-variable-tag-face ((t (:underline t))))
     (diary-face ((t (:foreground "gold"))))
     (erc-action-face ((t (:bold t :weight bold))))
     (erc-bold-face ((t (:bold t :weight bold))))
     (erc-default-face ((t (nil))))
     (erc-direct-msg-face ((t (:foreground "sandybrown"))))
     (erc-error-face ((t (:bold t :foreground "IndianRed" :weight bold))))
     (erc-input-face ((t (:foreground "Beige"))))
     (erc-inverse-face ((t (:background "wheat" :foreground "darkslategrey"))))
     (erc-notice-face ((t (:foreground "MediumAquamarine"))))
     (erc-pal-face ((t (:foreground "pale green"))))
     (erc-prompt-face ((t (:foreground "MediumAquamarine"))))
     (erc-underline-face ((t (:underline t))))
     (escape-glyph ((t (:foreground "brown"))))
     (eshell-ls-archive-face ((t (:bold t :foreground "IndianRed" :weight bold))))
     (eshell-ls-backup-face ((t (:foreground "Grey"))))
     (eshell-ls-clutter-face ((t (:foreground "DimGray"))))
     (eshell-ls-directory-face ((t (:bold t :foreground "MediumSlateBlue" :weight bold))))
     (eshell-ls-executable-face ((t (:foreground "Coral"))))
     (eshell-ls-missing-face ((t (:foreground "black"))))
     (eshell-ls-picture-face ((t (:foreground "Violet"))))
     (eshell-ls-product-face ((t (:foreground "sandybrown"))))
     (eshell-ls-readonly-face ((t (:foreground "Aquamarine"))))
     (eshell-ls-special-face ((t (:foreground "Gold"))))
     (eshell-ls-symlink-face ((t (:foreground "White"))))
     (eshell-ls-unreadable-face ((t (:foreground "DimGray"))))
     (eshell-prompt-face ((t (:foreground "MediumAquamarine"))))
     (file-name-shadow ((t (:foreground "green"))))
     (fixed-pitch ((t (:family "courier"))))
     (fl-comment-face ((t (:foreground "pink"))))
     (fl-doc-string-face ((t (:foreground "purple"))))
     (fl-function-name-face ((t (:foreground "red"))))
     (fl-keyword-face ((t (:foreground "cadetblue"))))
     (fl-string-face ((t (:foreground "green"))))
     (fl-type-face ((t (:foreground "yellow"))))
     (font-lock-builtin-face ((t (:bold t :foreground "cyan" :weight bold))))
     (font-lock-comment-delimiter-face ((t (:foreground "red"))))
     (font-lock-comment-face ((t (:foreground "Gold"))))
     (font-lock-constant-face ((t (:bold t :foreground "LightSteelBlue" :weight bold))))
     (font-lock-doc-face ((t (:foreground "green"))))
     (font-lock-doc-string-face ((t (:foreground "DarkOrange"))))
     (font-lock-function-name-face ((t (:bold t :foreground "gold" :weight bold))))
     (font-lock-keyword-face ((t (:bold t :foreground "Cyan" :weight bold))))
     (font-lock-negation-char-face ((t (nil))))
     (font-lock-preprocessor-face ((t (:foreground "Aquamarine"))))
     (font-lock-reference-face ((t (:foreground "SlateBlue"))))
     (font-lock-regexp-grouping-backslash ((t (:background "black" :foreground "white" :underline t))))
     (font-lock-regexp-grouping-construct ((t (:background "black" :foreground "white" :underline t))))
     (font-lock-string-face ((t (:foreground "Khaki"))))
     (font-lock-type-face ((t (:bold t :foreground "Cyan" :weight bold))))
     (font-lock-variable-name-face ((t (:italic t :foreground "gold" :slant italic))))
     (font-lock-warning-face ((t (:bold t :foreground "Pink" :weight bold))))
     (fringe ((t (:background "grey95"))))
     (gnus-cite-attribution-face ((t (:foreground "beige" :underline t))))
     (gnus-cite-face-1 ((t (:foreground "gold"))))
     (gnus-cite-face-10 ((t (:foreground "coral"))))
     (gnus-cite-face-11 ((t (:foreground "turquoise"))))
     (gnus-cite-face-2 ((t (:foreground "wheat"))))
     (gnus-cite-face-3 ((t (:foreground "light pink"))))
     (gnus-cite-face-4 ((t (:foreground "khaki"))))
     (gnus-cite-face-5 ((t (:foreground "pale green"))))
     (gnus-cite-face-6 ((t (:foreground "beige"))))
     (gnus-cite-face-7 ((t (:foreground "orange"))))
     (gnus-cite-face-8 ((t (:foreground "magenta"))))
     (gnus-cite-face-9 ((t (:foreground "violet"))))
     (gnus-emphasis-bold ((t (:bold t :foreground "light gray" :weight bold))))
     (gnus-emphasis-bold-italic ((t (:italic t :bold t :foreground "cyan" :slant italic :weight bold))))
     (gnus-emphasis-highlight-words ((t (:background "black" :foreground "gold"))))
     (gnus-emphasis-italic ((t (:italic t :foreground "cyan" :slant italic))))
     (gnus-emphasis-underline ((t (:foreground "white" :underline t))))
     (gnus-emphasis-underline-bold ((t (:bold t :foreground "white" :underline t :weight bold))))
     (gnus-emphasis-underline-bold-italic ((t (:italic t :bold t :foreground "white" :underline t :slant italic :weight bold))))
     (gnus-emphasis-underline-italic ((t (:italic t :foreground "white" :underline t :slant italic))))
     (gnus-group-mail-1-empty-face ((t (:foreground "Magenta"))))
     (gnus-group-mail-1-face ((t (:bold t :foreground "Magenta" :weight bold))))
     (gnus-group-mail-2-empty-face ((t (:foreground "aquamarine2"))))
     (gnus-group-mail-2-face ((t (:bold t :foreground "aquamarine2" :weight bold))))
     (gnus-group-mail-3-empty-face ((t (:foreground "Cyan"))))
     (gnus-group-mail-3-face ((t (:bold t :foreground "Cyan" :weight bold))))
     (gnus-group-mail-low-empty-face ((t (:foreground "Wheat"))))
     (gnus-group-mail-low-face ((t (:foreground "aquamarine4"))))
     (gnus-group-news-1-empty-face ((t (:foreground "PaleTurquoise"))))
     (gnus-group-news-1-face ((t (:bold t :foreground "PaleTurquoise" :weight bold))))
     (gnus-group-news-2-empty-face ((t (:foreground "turquoise"))))
     (gnus-group-news-2-face ((t (:bold t :foreground "turquoise" :weight bold))))
     (gnus-group-news-3-empty-face ((t (:foreground "wheat"))))
     (gnus-group-news-3-face ((t (:bold t :foreground "Wheat" :weight bold))))
     (gnus-group-news-4-empty-face ((t (nil))))
     (gnus-group-news-4-face ((t (:bold t :weight bold))))
     (gnus-group-news-5-empty-face ((t (nil))))
     (gnus-group-news-5-face ((t (:bold t :weight bold))))
     (gnus-group-news-6-empty-face ((t (nil))))
     (gnus-group-news-6-face ((t (:bold t :weight bold))))
     (gnus-group-news-low-empty-face ((t (:foreground "MediumAquamarine"))))
     (gnus-group-news-low-face ((t (:bold t :foreground "MediumAquamarine" :weight bold))))
     (gnus-header-content-face ((t (:italic t :foreground "Wheat" :slant italic))))
     (gnus-header-from-face ((t (:foreground "light yellow"))))
     (gnus-header-name-face ((t (:foreground "Wheat"))))
     (gnus-header-newsgroups-face ((t (:italic t :foreground "gold" :slant italic))))
     (gnus-header-subject-face ((t (:bold t :foreground "Gold" :weight bold))))
     (gnus-signature-face ((t (:italic t :foreground "white" :slant italic))))
     (gnus-splash-face ((t (:foreground "orange"))))
     (gnus-summary-cancelled-face ((t (:background "black" :foreground "orange"))))
     (gnus-summary-high-ancient-face ((t (:bold t :foreground "SkyBlue" :weight bold))))
     (gnus-summary-high-read-face ((t (:bold t :foreground "red" :weight bold))))
     (gnus-summary-high-ticked-face ((t (:bold t :foreground "coral" :weight bold))))
     (gnus-summary-high-unread-face ((t (:bold t :foreground "gold" :weight bold))))
     (gnus-summary-low-ancient-face ((t (:italic t :foreground "SkyBlue" :slant italic))))
     (gnus-summary-low-read-face ((t (:italic t :foreground "red" :slant italic))))
     (gnus-summary-low-ticked-face ((t (:italic t :foreground "coral" :slant italic))))
     (gnus-summary-low-unread-face ((t (:italic t :foreground "white" :slant italic))))
     (gnus-summary-normal-ancient-face ((t (:foreground "SkyBlue"))))
     (gnus-summary-normal-read-face ((t (:foreground "PaleGreen"))))
     (gnus-summary-normal-ticked-face ((t (:foreground "pink"))))
     (gnus-summary-normal-unread-face ((t (:foreground "white"))))
     (gnus-summary-selected-face ((t (:foreground "white" :underline t))))
     (green ((t (:foreground "green"))))
     (gui-button-face ((t (:background "grey75" :foreground "black"))))
     (gui-element ((t (:background "#D4D0C8" :foreground "black"))))
     (header-line ((t (:background "white" :foreground "blue" :inverse-video nil :underline t))))
     (help-argument-name ((t (nil))))
     (highlight ((t (:background "Blue" :foreground "white"))))
     (highline-face ((t (:background "dark slate gray" :foreground "white"))))
     (holiday-face ((t (:background "red" :foreground "white"))))
     (info-menu-5 ((t (:underline t))))
     (info-node ((t (:italic t :bold t :foreground "white" :slant italic :weight bold))))
     (info-xref ((t (:bold t :foreground "light gray" :weight bold))))
     (isearch ((t (:background "blue"))))
     (isearch-secondary ((t (:foreground "red3"))))
     (italic ((t (:italic t :foreground "cyan" :slant italic))))
     (lazy-highlight ((t (:background "turquoise3"))))
     (left-margin ((t (nil))))
     (link ((t (:foreground "blue" :underline t))))
     (link-visited ((t (:foreground "magenta4" :underline t))))
     (list-mode-item-selected ((t (:background "gray68" :foreground "white"))))
     (makefile-space-face ((t (:background "hotpink" :foreground "white"))))
     (match ((t (:background "yellow" :foreground "black"))))
     (menu ((t (nil))))
     (message-cited-text-face ((t (:foreground "green"))))
     (message-header-cc-face ((t (:bold t :foreground "Aquamarine" :weight bold))))
     (message-header-name-face ((t (:foreground "Gold"))))
     (message-header-newsgroups-face ((t (:italic t :bold t :foreground "gold" :slant italic :weight bold))))
     (message-header-other-face ((t (:foreground "lightGray"))))
     (message-header-subject-face ((t (:foreground "Yellow"))))
     (message-header-to-face ((t (:bold t :foreground "green2" :weight bold))))
     (message-header-xheader-face ((t (:foreground "sky blue"))))
     (message-mml-face ((t (:bold t :foreground "khaki" :weight bold))))
     (message-separator-face ((t (:background "aquamarine" :foreground "black"))))
     (minibuffer-prompt ((t (:foreground "medium blue"))))
     (mode-line ((t (:background "dark gray" :foreground "black"))))
     (mode-line-buffer-id ((t (:background "dark gray" :foreground "black"))))
     (mode-line-highlight ((t (:background "blue" :foreground "yellow"))))
     (mode-line-inactive ((t (:background "white" :foreground "blue"))))
     (modeline-mousable ((t (:background "dark gray" :foreground "black"))))
     (modeline-mousable-minor-mode ((t (:background "dark gray" :foreground "black"))))
     (mouse ((t (:background "black"))))
     (next-error ((t (:background "white" :foreground "black"))))
     (nobreak-space ((t (:background "magenta"))))
     (outline-1 ((t (:bold t :weight bold :foreground "gold"))))
     (outline-2 ((t (:italic t :slant italic :foreground "gold"))))
     (outline-3 ((t (:bold t :weight bold :foreground "Cyan"))))
     (outline-4 ((t (:bold t :weight bold :foreground "cyan"))))
     (outline-5 ((t (:foreground "Gold"))))
     (outline-6 ((t (:bold t :weight bold :foreground "LightSteelBlue"))))
     (outline-7 ((t (:bold t :weight bold :foreground "Cyan"))))
     (outline-8 ((t (:foreground "Khaki"))))
     (p4-depot-added-face ((t (:foreground "blue"))))
     (p4-depot-deleted-face ((t (:foreground "red"))))
     (p4-depot-unmapped-face ((t (:foreground "grey30"))))
     (p4-diff-change-face ((t (:foreground "dark green"))))
     (p4-diff-del-face ((t (:foreground "red"))))
     (p4-diff-file-face ((t (:background "gray90"))))
     (p4-diff-head-face ((t (:background "gray95"))))
     (p4-diff-ins-face ((t (:foreground "blue"))))
     (paren-mismatch-face ((t (:bold t :background "white" :foreground "red" :weight bold))))
     (paren-no-match-face ((t (:bold t :background "white" :foreground "red" :weight bold))))
     (pointer ((t (nil))))
     (primary-selection ((t (:background "blue"))))
     (qt-classes-face ((t (:foreground "Red"))))
     (query-replace ((t (:background "magenta4" :foreground "cyan1"))))
     (red ((t (:foreground "red"))))
     (region ((t (:background "MediumSlateBlue" :foreground "white"))))
     (right-margin ((t (nil))))
     (scroll-bar ((t (nil))))
     (secondary-selection ((t (:background "Sienna" :foreground "white"))))
     (shadow ((t (:foreground "green"))))
     (show-paren-match-face ((t (:background "purple" :foreground "white"))))
     (show-paren-mismatch-face ((t (:bold t :background "white" :foreground "red" :weight bold))))
     (speedbar-button-face ((t (nil))))
     (speedbar-directory-face ((t (nil))))
     (speedbar-file-face ((t (:bold t :weight bold))))
     (speedbar-highlight-face ((t (nil))))
     (speedbar-selected-face ((t (:underline t))))
     (speedbar-tag-face ((t (nil))))
     (swbuff-current-buffer-face ((t (:bold t :foreground "red" :weight bold))))
     (swbuff-default-face ((t (nil))))
     (swbuff-separator-face ((t (:foreground "blue"))))
     (swbuff-special-buffers-face ((t (:foreground "red" :underline nil :weight normal))))
     (text-cursor ((t (:background "yellow" :foreground "black"))))
     (tool-bar ((t (nil))))
     (tooltip ((t (:background "lightyellow" :foreground "black" :family "helv"))))
     (trailing-whitespace ((t (:background "red1"))))
     (underline ((t (:foreground "white" :underline t))))
     (variable-pitch ((t (:family "helv"))))
     (vertical-border ((t (:background "white" :foreground "blue"))))
     (vertical-divider ((t (nil))))
     (widget ((t (nil))))
     (widget-button ((t (:bold t :foreground "coral" :weight bold))))
     (widget-button-pressed ((t (:foreground "red"))))
     (widget-documentation ((t (:foreground "lime green"))))
     (widget-field ((t (:background "dim gray" :foreground "white"))))
     (widget-inactive ((t (:foreground "light gray"))))
     (widget-single-line-field ((t (:background "dim gray" :foreground "white"))))
     (woman-bold-face ((t (:bold t :weight bold))))
     (woman-italic-face ((t (:foreground "beige"))))
     (woman-unknown-face ((t (:foreground "LightSalmon"))))
     (yellow ((t (:foreground "yellow"))))
     (zmacs-region ((t (:background "snow" :foreground "blue")))))))
(add-to-list 'color-themes '(tty-dark-color-theme  "tty dark transparent" "Antonio Cuni"))


;;Wombat theme ported from Vim and modified by antocuni

(defun wombat-theme()
  (set-background-color "#202020")
  (set-foreground-color "#f6f3e8")
  (set-cursor-color "#656565")
  (set-face-foreground 'font-lock-comment-face "#99968b")
  (set-face-italic-p 'font-lock-comment-face nil)
  (set-face-foreground 'font-lock-doc-face "#99968b")
  (set-face-italic-p 'font-lock-doc-face t)
  (set-face-foreground 'font-lock-constant-face "#e5786d")
  (set-face-foreground 'font-lock-string-face "#95e454")
  (set-face-italic-p 'font-lock-string-face nil)
  (set-face-foreground 'font-lock-variable-name-face "#FF8888")
  (set-face-foreground 'font-lock-function-name-face "#FF8888")
  (set-face-foreground 'font-lock-type-face "#FF8888")
  (set-face-foreground 'font-lock-builtin-face "#8ac6f2")
  (set-face-foreground 'font-lock-keyword-face "#8ac6f2")
  (set-face-foreground 'font-lock-preprocessor-face "#e5786d")
  (set-face-foreground 'font-lock-negation-char-face "#e7f6da")
  (set-face-foreground 'link "#8ac6f2")
  (set-face-bold-p 'link t)
  (set-face-underline-p 'link t)
  ;;(set-face-foreground 'show-paren-match-face "#f6f3e8")
  ;;(set-face-background 'show-paren-match-face "#857b6f")
  ;;(set-face-bold-p 'show-paren-match t)
;;  (set-face-foreground 'region "#f6f3e8")
;;  (set-face-background 'region "#444444")
  (set-face-background 'region "LightGoldenrod")
  (set-face-foreground 'region "black")
  (set-face-foreground 'lazy-highlight "black")
  (set-face-background 'lazy-highlight "yellow"))

(wombat-theme)


(if (not window-system)
    (progn
      (color-theme-initialize)
      (tty-dark-color-theme)))

